{"version":3,"sources":["components/Header.js","components/Task.js","components/Tasks.js","components/AddTask.js","App.js","index.js"],"names":["Header","title","onShow","setShow","className","Button","variant","color","onClick","Task","task","onDeletes","onToggle","reminder","onDoubleClick","id","onTouchEnd","text","name","day","Tasks","tasks","onDelete","map","AddTask","onAdd","React","Date","date","setDate","setText","setReminder","Box","component","noValidate","autoComplete","TextField","label","value","required","onChange","e","target","LocalizationProvider","dateAdapter","AdapterDateFns","DateTimePicker","format","minDate","newValue","renderInput","params","FormControlLabel","currentTarget","checked","control","Checkbox","sx","pink","type","style","backgroundColor","margin","preventDefault","toLocaleString","console","log","alert","App","useState","showForm","setshowForm","setTasks","addTask","a","fetch","method","headers","body","JSON","stringify","res","json","data","useEffect","fetchTasks","tasksFromServer","getTasks","fetchTask","deleteTask","filter","toggleReminder","taskToToggle","updTask","Paper","elevation","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.079600fe.chunk.js","sourcesContent":["// import PropTypes from \"prop-types\";\r\n\r\nimport { Button } from \"@mui/material\";\r\n\r\nconst Header = ({ title, onShow, setShow }) => {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1 className=\"header-title\">{title}</h1>\r\n      {/* <Btn color=\"orange\" text=\"Sub Mit\" onClick={onClick} />\r\n      <Btn color=\"blue\" text=\"Suck it\" />\r\n      <Btn color=\"red\" text=\"Avenge\" /> */}\r\n      <Button\r\n        variant=\"contained\"\r\n        color={setShow ? \"error\" : \"success\"}\r\n        onClick={onShow}\r\n      >\r\n        {setShow ? \"Close\" : \"Add Task\"}\r\n      </Button>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import { Button } from \"@mui/material\";\r\n\r\nconst Task = ({ task, onDeletes, onToggle }) => {\r\n  return (\r\n    <div\r\n      className={`task ${task.reminder ? \"reminder\" : \"\"}`}\r\n      onDoubleClick={() => onToggle(task.id)}\r\n      onTouchEnd={() => onToggle(task.id)}\r\n    >\r\n      <h3 className=\"tasklist\">\r\n        {task.text}\r\n        <Button color=\"error\" onClick={() => onDeletes(task.id)}>\r\n          <ion-icon name=\"close-circle\" className=\"task-icon\"></ion-icon>\r\n        </Button>\r\n      </h3>\r\n      <p>{task.day}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import Task from \"./Task\";\r\nimport \"./Task.css\";\r\n\r\nconst Tasks = ({ tasks, onDelete, onToggle }) => {\r\n  return (\r\n    <>\r\n      {tasks.map((task) => (\r\n        <Task\r\n          key={task.id}\r\n          task={task}\r\n          className=\"task\"\r\n          onDeletes={onDelete}\r\n          onToggle={onToggle}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n","import * as React from \"react\";\r\n// import * as moment from \"moment\";\r\n// import { useState } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport { pink } from \"@mui/material/colors\";\r\nimport DateTimePicker from \"@mui/lab/DateTimePicker\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\r\nimport { Button } from \"@mui/material\";\r\n\r\nconst AddTask = ({ onAdd }) => {\r\n  const [date, setDate] = React.useState(new Date(\"\"));\r\n  const [text, setText] = React.useState(\"\");\r\n  const [reminder, setReminder] = React.useState(false);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!text) {\r\n      alert(\"Please add a task\");\r\n    } else {\r\n      // const day = JSON.stringify(date); works fine but as raw date\r\n      // const day = date.toISOString();\r\n      // const day = date.toUTCString(); //to gmt\r\n      // const day = date.toLocaleTimeString(); optional\r\n      // const day = date.toLocaleDateString(); optional\r\n      const day = date.toLocaleString();\r\n      onAdd({ text, day, reminder });\r\n      console.log(day);\r\n      console.log(date);\r\n      setText(\"\");\r\n      setDate(\"\");\r\n      setReminder(false);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <Box\r\n        component=\"form\"\r\n        // sx={{ \"& .MuiTextField-root\": { m: 1, width: \"32ch\" } }}\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        className=\"form-inputs\"\r\n      >\r\n        <div className=\"form\">\r\n          <TextField\r\n            id=\"outlined\"\r\n            label=\"Task Name\"\r\n            value={text}\r\n            required\r\n            onChange={(e) => setText(e.target.value)}\r\n          />\r\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n            <DateTimePicker\r\n              label=\"Date/Time Picker\"\r\n              required\r\n              variant=\"dialog\"\r\n              format=\"DD-MM-yyyy\"\r\n              value={date}\r\n              minDate={new Date()}\r\n              // views={[\"month\", \"day\", \"year\", \"hours\", \"minutes\", \"seconds\"]}\r\n              onChange={(newValue) => {\r\n                //newValue can be anything like e\r\n                setDate(newValue);\r\n                // setDate(newValue.target.value);\r\n              }}\r\n              renderInput={(params) => <TextField {...params} />}\r\n            />\r\n          </LocalizationProvider>\r\n          <FormControlLabel\r\n            value={reminder}\r\n            onChange={(e) => setReminder(e.currentTarget.checked)}\r\n            control={\r\n              <Checkbox\r\n                // defaultChecked\r\n                checked={reminder}\r\n                sx={{\r\n                  color: pink[800],\r\n                  \"&.Mui-checked\": {\r\n                    color: pink[600],\r\n                  },\r\n                }}\r\n              />\r\n            }\r\n            label=\"Set Reminder\"\r\n            // labelPlacement=\"Set Reminder\"\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            // value=\"Save Task\"\r\n            style={{ backgroundColor: \"orange\", margin: \"0rem 2rem 2rem 2rem\" }}\r\n            onClick={onSubmit}\r\n          >\r\n            Save Task\r\n          </Button>\r\n        </div>\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTask;\r\n\r\n/* \r\n\r\n\r\nexport default function ValidationTextFields() {\r\n  return (\r\n    <Box\r\n      component=\"form\"\r\n      sx={{\r\n        '& .MuiTextField-root': { m: 1, width: '25ch' },\r\n      }}\r\n      noValidate\r\n      autoComplete=\"off\"\r\n    >\r\n      <div>\r\n        <TextField\r\n          error\r\n          id=\"outlined-error\"\r\n          label=\"Error\"\r\n          defaultValue=\"Hello World\"\r\n        />\r\n        <TextField\r\n          error\r\n          id=\"outlined-error-helper-text\"\r\n          label=\"Error\"\r\n          defaultValue=\"Hello World\"\r\n          helperText=\"Incorrect entry.\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <TextField\r\n          error\r\n          id=\"filled-error\"\r\n          label=\"Error\"\r\n          defaultValue=\"Hello World\"\r\n          variant=\"filled\"\r\n        />\r\n        <TextField\r\n          error\r\n          id=\"filled-error-helper-text\"\r\n          label=\"Error\"\r\n          defaultValue=\"Hello World\"\r\n          helperText=\"Incorrect entry.\"\r\n          variant=\"filled\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <TextField\r\n          error\r\n          id=\"standard-error\"\r\n          label=\"Error\"\r\n          defaultValue=\"Hello World\"\r\n          variant=\"standard\"\r\n        />\r\n        <TextField\r\n          error\r\n          id=\"standard-error-helper-text\"\r\n          label=\"Error\"\r\n          defaultValue=\"Hello World\"\r\n          helperText=\"Incorrect entry.\"\r\n          variant=\"standard\"\r\n        />\r\n      </div>\r\n    </Box>\r\n  );\r\n} */\r\n","//rafce shortcut\n\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport { useState, useEffect } from \"react\";\nimport Tasks from \"./components/Tasks\";\nimport AddTask from \"./components/AddTask\";\nimport { Paper } from \"@mui/material\";\n\nfunction App() {\n  const [showForm, setshowForm] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  //Adding Task\n  const addTask = async (task) => {\n    const res = await fetch(\"http://localhost:5000/tasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"Application/json\",\n      },\n      body: JSON.stringify(task),\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]);\n  };\n\n  /* const addTask = (task) => {\n    const id = Math.floor(Math.random() * 10000) + 1;\n    const newTask = { id, ...task };\n    setTasks([...tasks, newTask]);\n    console.log(task);\n  }; */\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []);\n\n  // Fetch Tasks\n  const fetchTasks = async () => {\n    const res = await fetch(\"http://localhost:5000/tasks\");\n    const data = await res.json();\n\n    return data;\n  };\n  // Fetch Task\n  const fetchTask = async (id) => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n\n    return data;\n  };\n  // Delete action\n  const deleteTask = async (id) => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"DELETE\",\n    });\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n  /* const deleteTask = (id) => {\n    setTasks(tasks.filter((task) => task.id !== id));\n  }; */\n  // Toggle reminder\n  const toggleReminder = async (id) => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle, reminder: !taskToToggle.reminder };\n\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updTask),\n    });\n\n    const data = await res.json();\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, reminder: data.reminder } : task\n      )\n    );\n    console.log(tasks);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header\n        title={\"Event Tracker\"}\n        onShow={() => setshowForm(!showForm)}\n        setShow={showForm}\n      />\n\n      {showForm && (\n        <Paper elevation={3} className=\"paper\">\n          <AddTask onAdd={addTask} />\n        </Paper>\n      )}\n\n      {tasks.length > 0 ? (\n        <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder} />\n      ) : (\n        <h3 className=\"notice\">No Task at the moment</h3>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}